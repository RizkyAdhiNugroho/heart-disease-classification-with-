# -*- coding: utf-8 -*-
"""revisi_Fix_submission_1_MLTipynb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17RIZK74b52Qs3YMySlxUu_ZDl1BjKQEI

# Laporan Proyek Machine Learning - Rizky Adhi Nugroho
email : nugrohorizkyadhi@gmail.com
#### Predictive analytics klasifikasi pada faktor faktor hubungan yang mempengaruhi heart disease 
#### metode :


1.   Regresi Logistik
2.   Algoritma KNN

## Data Loading

### import library dan data dari gdrive
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

#import data dari drive
from google.colab import drive
drive.mount('/content/drive')

"""### ekstrak zip"""

! unzip /content/drive/MyDrive/dataheart.zip
#tentukan dataframe
df = pd.read_csv("/content/heart.csv")

"""### bentuk dataframe"""

print(df.tail())

"""### EDA ( Deskripsi Data )"""

print(df.describe())
print(df.info())
print(df.shape)

"""### visualisasi data target sebelum di clean"""

fitur = "target"
count = df[fitur].value_counts()
percent = 100*df[fitur].value_counts(normalize=True)
dt = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(dt)
count.plot(kind='bar', title=fitur);

"""## Data Preparation

### EDA ( data Missing value, duplikasi, inkonsisten, dan Outliers )

#### missing value dan duplikasi data
"""

# mencari missing value
print(df.isnull().sum())
print(df.isna().sum())

#mencari data terduplikasi
print("data duplikasi:", df.duplicated().sum())

"""#### Cek data Inkonsisten"""

#mencari nilai yang tidak konsisten (nilai negatif pada data)
continuous_features = ['age',
                      'trestbps',
                      'chol',
                      'thalach',
                      'oldpeak'
                     ]
for feature in continuous_features:
    print(str(feature)+': '+str(sum(df[feature] < 0)))

"""#### visualisasi outliers dengan boxplot"""

#boxlplot kolom age
print(sns.boxplot(x=df['age']))

#boxlplot kolom trestbps
print(sns.boxplot(x=df['trestbps']))

#boxlplot kolom chol
print(sns.boxplot(x=df['chol']))

#boxlplot kolom thalach
print(sns.boxplot(x=df['thalach']))

#boxlplot kolom oldpeak
print(sns.boxplot(x=df['oldpeak']))

"""####mengatasi outliers"""

#identifikasi outlier dan ubah ke null
for i in ['trestbps', 'chol', 'thalach', 'oldpeak']:
  Q1,Q3 = np.percentile(df.loc[:,i],[25,75])
  IQR = Q3 - Q1
  upper = Q3+(1.5*IQR)
  lower = Q1-(1.5*IQR)
  df.loc[df[i] < lower,i] = np.nan
  df.loc[df[i] > upper,i] = np.nan

df.isnull().sum()

#imputasi outlier dengan median
columnc=['trestbps', 'chol', 'thalach', 'oldpeak']
for i in columnc:
  df.loc[df.loc[:,i].isnull(),i]=df.loc[:,i].median()

print(df.isnull().sum())
print(df.shape)

#membuat boxplot setelah menangani outlier

for cf in continuous_features:
    plt.boxplot(df[cf], vert=False)
    plt.title(cf)
    plt.xlabel(xlabel = cf,
               rotation=90)

    plt.show();

"""### EDA ( Univariate analysis )"""

# univariate EDA
numerical_features = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']
categorical_features = ['sex', 'cp', 'restecg', 'exang', 'slope', 'ca','thal', 'target']

df.hist(bins=50, figsize=(20,15))
plt.show()

feature = categorical_features[7]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
dt = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(dt)
count.plot(kind='bar', title=feature);

"""### EDA (Multivariate analysis)

#### Melihat korelasi antar variabel dengan heatmap
"""

plt.figure(figsize=(12, 10))
sns.heatmap(df.corr(), 
            annot=True);

"""### Split data"""

#split data 80 20
from sklearn.model_selection import train_test_split

X = df.drop(["target"],axis =1)
y = df["target"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""## Model Development

### Model Logistik Regression
"""

#model Logistic Regression
from sklearn.metrics import accuracy_score, classification_report
from sklearn.linear_model import LogisticRegression
model_logreg = LogisticRegression(solver='lbfgs', multi_class='auto')
model_logreg.fit(X_train,y_train)
y_pred = model_logreg.predict(X_test)

"""### Model KNN"""

#model KNN
from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train,y_train)
y_pred2 = knn.predict(X_test)

"""## Evaluasi Model

#### model LR
"""

# Model logistik Regression
print(classification_report(y_test, y_pred))
print("akurasi LR :", accuracy_score(y_test, y_pred))

"""#### Model KNN"""

# Model  KNN
print(classification_report(y_test, y_pred2))
print("akurasi model knn:", knn.score(X_test,y_test))

models = [model_logreg, knn]
accuracy_scores = []
for model in models:
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    accuracy_scores.append(accuracy)
    
print(accuracy_scores)